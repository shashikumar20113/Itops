/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lti.itops.ipac.custcatmgmt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTable;
import com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTableModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TTDPSPCustDecisionTaskTable service. Represents a row in the &quot;IPAC_CUST_CAT_MGMT_TTDPSPCustDecisionTaskTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TTDPSPCustDecisionTaskTableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TTDPSPCustDecisionTaskTableImpl}.
 * </p>
 *
 * @author sunprabh
 * @see TTDPSPCustDecisionTaskTableImpl
 * @see TTDPSPCustDecisionTaskTable
 * @see TTDPSPCustDecisionTaskTableModel
 * @generated
 */
@ProviderType
public class TTDPSPCustDecisionTaskTableModelImpl extends BaseModelImpl<TTDPSPCustDecisionTaskTable>
	implements TTDPSPCustDecisionTaskTableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ttdpsp cust decision task table model instance should use the {@link TTDPSPCustDecisionTaskTable} interface instead.
	 */
	public static final String TABLE_NAME = "IPAC_CUST_CAT_MGMT_TTDPSPCustDecisionTaskTable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "TTDPSPCustDecisionTaskTableId", Types.BIGINT },
			{ "subTTDPSPTaskCustomerId", Types.BIGINT },
			{ "condition_", Types.BOOLEAN },
			{ "order_", Types.INTEGER },
			{ "parentTTDPSPTaskCustomerId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("TTDPSPCustDecisionTaskTableId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("subTTDPSPTaskCustomerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("condition_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("parentTTDPSPTaskCustomerId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table IPAC_CUST_CAT_MGMT_TTDPSPCustDecisionTaskTable (TTDPSPCustDecisionTaskTableId LONG not null primary key,subTTDPSPTaskCustomerId LONG,condition_ BOOLEAN,order_ INTEGER,parentTTDPSPTaskCustomerId LONG)";
	public static final String TABLE_SQL_DROP = "drop table IPAC_CUST_CAT_MGMT_TTDPSPCustDecisionTaskTable";
	public static final String ORDER_BY_JPQL = " ORDER BY ttdpspCustDecisionTaskTable.TTDPSPCustDecisionTaskTableId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IPAC_CUST_CAT_MGMT_TTDPSPCustDecisionTaskTable.TTDPSPCustDecisionTaskTableId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTable"),
			true);
	public static final long CONDITION_COLUMN_BITMASK = 1L;
	public static final long PARENTTTDPSPTASKCUSTOMERID_COLUMN_BITMASK = 2L;
	public static final long SUBTTDPSPTASKCUSTOMERID_COLUMN_BITMASK = 4L;
	public static final long TTDPSPCUSTDECISIONTASKTABLEID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"lock.expiration.time.com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTable"));

	public TTDPSPCustDecisionTaskTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _TTDPSPCustDecisionTaskTableId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTTDPSPCustDecisionTaskTableId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _TTDPSPCustDecisionTaskTableId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TTDPSPCustDecisionTaskTable.class;
	}

	@Override
	public String getModelClassName() {
		return TTDPSPCustDecisionTaskTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("TTDPSPCustDecisionTaskTableId",
			getTTDPSPCustDecisionTaskTableId());
		attributes.put("subTTDPSPTaskCustomerId", getSubTTDPSPTaskCustomerId());
		attributes.put("condition", isCondition());
		attributes.put("order", getOrder());
		attributes.put("parentTTDPSPTaskCustomerId",
			getParentTTDPSPTaskCustomerId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long TTDPSPCustDecisionTaskTableId = (Long)attributes.get(
				"TTDPSPCustDecisionTaskTableId");

		if (TTDPSPCustDecisionTaskTableId != null) {
			setTTDPSPCustDecisionTaskTableId(TTDPSPCustDecisionTaskTableId);
		}

		Long subTTDPSPTaskCustomerId = (Long)attributes.get(
				"subTTDPSPTaskCustomerId");

		if (subTTDPSPTaskCustomerId != null) {
			setSubTTDPSPTaskCustomerId(subTTDPSPTaskCustomerId);
		}

		Boolean condition = (Boolean)attributes.get("condition");

		if (condition != null) {
			setCondition(condition);
		}

		Integer order = (Integer)attributes.get("order");

		if (order != null) {
			setOrder(order);
		}

		Long parentTTDPSPTaskCustomerId = (Long)attributes.get(
				"parentTTDPSPTaskCustomerId");

		if (parentTTDPSPTaskCustomerId != null) {
			setParentTTDPSPTaskCustomerId(parentTTDPSPTaskCustomerId);
		}
	}

	@Override
	public long getTTDPSPCustDecisionTaskTableId() {
		return _TTDPSPCustDecisionTaskTableId;
	}

	@Override
	public void setTTDPSPCustDecisionTaskTableId(
		long TTDPSPCustDecisionTaskTableId) {
		_TTDPSPCustDecisionTaskTableId = TTDPSPCustDecisionTaskTableId;
	}

	@Override
	public long getSubTTDPSPTaskCustomerId() {
		return _subTTDPSPTaskCustomerId;
	}

	@Override
	public void setSubTTDPSPTaskCustomerId(long subTTDPSPTaskCustomerId) {
		_columnBitmask |= SUBTTDPSPTASKCUSTOMERID_COLUMN_BITMASK;

		if (!_setOriginalSubTTDPSPTaskCustomerId) {
			_setOriginalSubTTDPSPTaskCustomerId = true;

			_originalSubTTDPSPTaskCustomerId = _subTTDPSPTaskCustomerId;
		}

		_subTTDPSPTaskCustomerId = subTTDPSPTaskCustomerId;
	}

	public long getOriginalSubTTDPSPTaskCustomerId() {
		return _originalSubTTDPSPTaskCustomerId;
	}

	@Override
	public boolean getCondition() {
		return _condition;
	}

	@Override
	public boolean isCondition() {
		return _condition;
	}

	@Override
	public void setCondition(boolean condition) {
		_columnBitmask |= CONDITION_COLUMN_BITMASK;

		if (!_setOriginalCondition) {
			_setOriginalCondition = true;

			_originalCondition = _condition;
		}

		_condition = condition;
	}

	public boolean getOriginalCondition() {
		return _originalCondition;
	}

	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		_order = order;
	}

	@Override
	public long getParentTTDPSPTaskCustomerId() {
		return _parentTTDPSPTaskCustomerId;
	}

	@Override
	public void setParentTTDPSPTaskCustomerId(long parentTTDPSPTaskCustomerId) {
		_columnBitmask |= PARENTTTDPSPTASKCUSTOMERID_COLUMN_BITMASK;

		if (!_setOriginalParentTTDPSPTaskCustomerId) {
			_setOriginalParentTTDPSPTaskCustomerId = true;

			_originalParentTTDPSPTaskCustomerId = _parentTTDPSPTaskCustomerId;
		}

		_parentTTDPSPTaskCustomerId = parentTTDPSPTaskCustomerId;
	}

	public long getOriginalParentTTDPSPTaskCustomerId() {
		return _originalParentTTDPSPTaskCustomerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TTDPSPCustDecisionTaskTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TTDPSPCustDecisionTaskTable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TTDPSPCustDecisionTaskTable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TTDPSPCustDecisionTaskTableImpl ttdpspCustDecisionTaskTableImpl = new TTDPSPCustDecisionTaskTableImpl();

		ttdpspCustDecisionTaskTableImpl.setTTDPSPCustDecisionTaskTableId(getTTDPSPCustDecisionTaskTableId());
		ttdpspCustDecisionTaskTableImpl.setSubTTDPSPTaskCustomerId(getSubTTDPSPTaskCustomerId());
		ttdpspCustDecisionTaskTableImpl.setCondition(isCondition());
		ttdpspCustDecisionTaskTableImpl.setOrder(getOrder());
		ttdpspCustDecisionTaskTableImpl.setParentTTDPSPTaskCustomerId(getParentTTDPSPTaskCustomerId());

		ttdpspCustDecisionTaskTableImpl.resetOriginalValues();

		return ttdpspCustDecisionTaskTableImpl;
	}

	@Override
	public int compareTo(
		TTDPSPCustDecisionTaskTable ttdpspCustDecisionTaskTable) {
		long primaryKey = ttdpspCustDecisionTaskTable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TTDPSPCustDecisionTaskTable)) {
			return false;
		}

		TTDPSPCustDecisionTaskTable ttdpspCustDecisionTaskTable = (TTDPSPCustDecisionTaskTable)obj;

		long primaryKey = ttdpspCustDecisionTaskTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TTDPSPCustDecisionTaskTableModelImpl ttdpspCustDecisionTaskTableModelImpl =
			this;

		ttdpspCustDecisionTaskTableModelImpl._originalSubTTDPSPTaskCustomerId = ttdpspCustDecisionTaskTableModelImpl._subTTDPSPTaskCustomerId;

		ttdpspCustDecisionTaskTableModelImpl._setOriginalSubTTDPSPTaskCustomerId = false;

		ttdpspCustDecisionTaskTableModelImpl._originalCondition = ttdpspCustDecisionTaskTableModelImpl._condition;

		ttdpspCustDecisionTaskTableModelImpl._setOriginalCondition = false;

		ttdpspCustDecisionTaskTableModelImpl._originalParentTTDPSPTaskCustomerId = ttdpspCustDecisionTaskTableModelImpl._parentTTDPSPTaskCustomerId;

		ttdpspCustDecisionTaskTableModelImpl._setOriginalParentTTDPSPTaskCustomerId = false;

		ttdpspCustDecisionTaskTableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TTDPSPCustDecisionTaskTable> toCacheModel() {
		TTDPSPCustDecisionTaskTableCacheModel ttdpspCustDecisionTaskTableCacheModel =
			new TTDPSPCustDecisionTaskTableCacheModel();

		ttdpspCustDecisionTaskTableCacheModel.TTDPSPCustDecisionTaskTableId = getTTDPSPCustDecisionTaskTableId();

		ttdpspCustDecisionTaskTableCacheModel.subTTDPSPTaskCustomerId = getSubTTDPSPTaskCustomerId();

		ttdpspCustDecisionTaskTableCacheModel.condition = isCondition();

		ttdpspCustDecisionTaskTableCacheModel.order = getOrder();

		ttdpspCustDecisionTaskTableCacheModel.parentTTDPSPTaskCustomerId = getParentTTDPSPTaskCustomerId();

		return ttdpspCustDecisionTaskTableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{TTDPSPCustDecisionTaskTableId=");
		sb.append(getTTDPSPCustDecisionTaskTableId());
		sb.append(", subTTDPSPTaskCustomerId=");
		sb.append(getSubTTDPSPTaskCustomerId());
		sb.append(", condition=");
		sb.append(isCondition());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append(", parentTTDPSPTaskCustomerId=");
		sb.append(getParentTTDPSPTaskCustomerId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append(
			"com.lti.itops.ipac.custcatmgmt.model.TTDPSPCustDecisionTaskTable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>TTDPSPCustDecisionTaskTableId</column-name><column-value><![CDATA[");
		sb.append(getTTDPSPCustDecisionTaskTableId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subTTDPSPTaskCustomerId</column-name><column-value><![CDATA[");
		sb.append(getSubTTDPSPTaskCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>condition</column-name><column-value><![CDATA[");
		sb.append(isCondition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTTDPSPTaskCustomerId</column-name><column-value><![CDATA[");
		sb.append(getParentTTDPSPTaskCustomerId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TTDPSPCustDecisionTaskTable.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TTDPSPCustDecisionTaskTable.class, ModelWrapper.class
		};
	private long _TTDPSPCustDecisionTaskTableId;
	private long _subTTDPSPTaskCustomerId;
	private long _originalSubTTDPSPTaskCustomerId;
	private boolean _setOriginalSubTTDPSPTaskCustomerId;
	private boolean _condition;
	private boolean _originalCondition;
	private boolean _setOriginalCondition;
	private int _order;
	private long _parentTTDPSPTaskCustomerId;
	private long _originalParentTTDPSPTaskCustomerId;
	private boolean _setOriginalParentTTDPSPTaskCustomerId;
	private long _columnBitmask;
	private TTDPSPCustDecisionTaskTable _escapedModel;
}