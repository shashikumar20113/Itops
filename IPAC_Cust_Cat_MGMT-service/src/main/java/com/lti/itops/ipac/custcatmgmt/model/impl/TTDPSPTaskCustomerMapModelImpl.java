/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lti.itops.ipac.custcatmgmt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMap;
import com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMapModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the TTDPSPTaskCustomerMap service. Represents a row in the &quot;IPAC_CUST_CAT_MGMT_TTDPSPTaskCustomerMap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TTDPSPTaskCustomerMapModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TTDPSPTaskCustomerMapImpl}.
 * </p>
 *
 * @author sunprabh
 * @see TTDPSPTaskCustomerMapImpl
 * @see TTDPSPTaskCustomerMap
 * @see TTDPSPTaskCustomerMapModel
 * @generated
 */
@ProviderType
public class TTDPSPTaskCustomerMapModelImpl extends BaseModelImpl<TTDPSPTaskCustomerMap>
	implements TTDPSPTaskCustomerMapModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ttdpsp task customer map model instance should use the {@link TTDPSPTaskCustomerMap} interface instead.
	 */
	public static final String TABLE_NAME = "IPAC_CUST_CAT_MGMT_TTDPSPTaskCustomerMap";
	public static final Object[][] TABLE_COLUMNS = {
			{ "TTDPSPTaskCustomerId", Types.BIGINT },
			{ "TTDPSubProcessId", Types.BIGINT },
			{ "taskId", Types.BIGINT },
			{ "orderBy", Types.INTEGER },
			{ "organizationId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "taskTypeId", Types.INTEGER },
			{ "companyId", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "createdOn", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT },
			{ "modifiedOn", Types.TIMESTAMP },
			{ "statusId", Types.INTEGER },
			{ "doGroupId", Types.BIGINT },
			{ "taskAssessmentId", Types.BIGINT },
			{ "parentTTDPSPTaskCustMapId", Types.BIGINT },
			{ "linkedTTDPSubprocessCustMapId", Types.BIGINT },
			{ "taskOrderNumber", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("TTDPSPTaskCustomerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("TTDPSubProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("orderBy", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("organizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taskTypeId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("statusId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("doGroupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskAssessmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentTTDPSPTaskCustMapId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("linkedTTDPSubprocessCustMapId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taskOrderNumber", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table IPAC_CUST_CAT_MGMT_TTDPSPTaskCustomerMap (TTDPSPTaskCustomerId LONG not null primary key,TTDPSubProcessId LONG,taskId LONG,orderBy INTEGER,organizationId LONG,name STRING null,taskTypeId INTEGER,companyId LONG,createdBy LONG,createdOn DATE null,modifiedBy LONG,modifiedOn DATE null,statusId INTEGER,doGroupId LONG,taskAssessmentId LONG,parentTTDPSPTaskCustMapId LONG,linkedTTDPSubprocessCustMapId LONG,taskOrderNumber INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table IPAC_CUST_CAT_MGMT_TTDPSPTaskCustomerMap";
	public static final String ORDER_BY_JPQL = " ORDER BY ttdpspTaskCustomerMap.TTDPSPTaskCustomerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IPAC_CUST_CAT_MGMT_TTDPSPTaskCustomerMap.TTDPSPTaskCustomerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMap"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMap"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMap"),
			true);
	public static final long TTDPSPTASKCUSTOMERID_COLUMN_BITMASK = 1L;
	public static final long TTDPSUBPROCESSID_COLUMN_BITMASK = 2L;
	public static final long ORGANIZATIONID_COLUMN_BITMASK = 4L;
	public static final long TASKID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.lti.itops.ipac.custcatmgmt.service.util.ServiceProps.get(
				"lock.expiration.time.com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMap"));

	public TTDPSPTaskCustomerMapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _TTDPSPTaskCustomerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTTDPSPTaskCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _TTDPSPTaskCustomerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TTDPSPTaskCustomerMap.class;
	}

	@Override
	public String getModelClassName() {
		return TTDPSPTaskCustomerMap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("TTDPSPTaskCustomerId", getTTDPSPTaskCustomerId());
		attributes.put("TTDPSubProcessId", getTTDPSubProcessId());
		attributes.put("taskId", getTaskId());
		attributes.put("orderBy", getOrderBy());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("name", getName());
		attributes.put("taskTypeId", getTaskTypeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdOn", getCreatedOn());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedOn", getModifiedOn());
		attributes.put("statusId", getStatusId());
		attributes.put("doGroupId", getDoGroupId());
		attributes.put("taskAssessmentId", getTaskAssessmentId());
		attributes.put("parentTTDPSPTaskCustMapId",
			getParentTTDPSPTaskCustMapId());
		attributes.put("linkedTTDPSubprocessCustMapId",
			getLinkedTTDPSubprocessCustMapId());
		attributes.put("taskOrderNumber", getTaskOrderNumber());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long TTDPSPTaskCustomerId = (Long)attributes.get("TTDPSPTaskCustomerId");

		if (TTDPSPTaskCustomerId != null) {
			setTTDPSPTaskCustomerId(TTDPSPTaskCustomerId);
		}

		Long TTDPSubProcessId = (Long)attributes.get("TTDPSubProcessId");

		if (TTDPSubProcessId != null) {
			setTTDPSubProcessId(TTDPSubProcessId);
		}

		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		Integer orderBy = (Integer)attributes.get("orderBy");

		if (orderBy != null) {
			setOrderBy(orderBy);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer taskTypeId = (Integer)attributes.get("taskTypeId");

		if (taskTypeId != null) {
			setTaskTypeId(taskTypeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdOn = (Date)attributes.get("createdOn");

		if (createdOn != null) {
			setCreatedOn(createdOn);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedOn = (Date)attributes.get("modifiedOn");

		if (modifiedOn != null) {
			setModifiedOn(modifiedOn);
		}

		Integer statusId = (Integer)attributes.get("statusId");

		if (statusId != null) {
			setStatusId(statusId);
		}

		Long doGroupId = (Long)attributes.get("doGroupId");

		if (doGroupId != null) {
			setDoGroupId(doGroupId);
		}

		Long taskAssessmentId = (Long)attributes.get("taskAssessmentId");

		if (taskAssessmentId != null) {
			setTaskAssessmentId(taskAssessmentId);
		}

		Long parentTTDPSPTaskCustMapId = (Long)attributes.get(
				"parentTTDPSPTaskCustMapId");

		if (parentTTDPSPTaskCustMapId != null) {
			setParentTTDPSPTaskCustMapId(parentTTDPSPTaskCustMapId);
		}

		Long linkedTTDPSubprocessCustMapId = (Long)attributes.get(
				"linkedTTDPSubprocessCustMapId");

		if (linkedTTDPSubprocessCustMapId != null) {
			setLinkedTTDPSubprocessCustMapId(linkedTTDPSubprocessCustMapId);
		}

		Integer taskOrderNumber = (Integer)attributes.get("taskOrderNumber");

		if (taskOrderNumber != null) {
			setTaskOrderNumber(taskOrderNumber);
		}
	}

	@Override
	public long getTTDPSPTaskCustomerId() {
		return _TTDPSPTaskCustomerId;
	}

	@Override
	public void setTTDPSPTaskCustomerId(long TTDPSPTaskCustomerId) {
		_columnBitmask |= TTDPSPTASKCUSTOMERID_COLUMN_BITMASK;

		if (!_setOriginalTTDPSPTaskCustomerId) {
			_setOriginalTTDPSPTaskCustomerId = true;

			_originalTTDPSPTaskCustomerId = _TTDPSPTaskCustomerId;
		}

		_TTDPSPTaskCustomerId = TTDPSPTaskCustomerId;
	}

	public long getOriginalTTDPSPTaskCustomerId() {
		return _originalTTDPSPTaskCustomerId;
	}

	@Override
	public long getTTDPSubProcessId() {
		return _TTDPSubProcessId;
	}

	@Override
	public void setTTDPSubProcessId(long TTDPSubProcessId) {
		_columnBitmask |= TTDPSUBPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalTTDPSubProcessId) {
			_setOriginalTTDPSubProcessId = true;

			_originalTTDPSubProcessId = _TTDPSubProcessId;
		}

		_TTDPSubProcessId = TTDPSubProcessId;
	}

	public long getOriginalTTDPSubProcessId() {
		return _originalTTDPSubProcessId;
	}

	@Override
	public long getTaskId() {
		return _taskId;
	}

	@Override
	public void setTaskId(long taskId) {
		_columnBitmask |= TASKID_COLUMN_BITMASK;

		if (!_setOriginalTaskId) {
			_setOriginalTaskId = true;

			_originalTaskId = _taskId;
		}

		_taskId = taskId;
	}

	public long getOriginalTaskId() {
		return _originalTaskId;
	}

	@Override
	public int getOrderBy() {
		return _orderBy;
	}

	@Override
	public void setOrderBy(int orderBy) {
		_orderBy = orderBy;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_columnBitmask |= ORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalOrganizationId) {
			_setOriginalOrganizationId = true;

			_originalOrganizationId = _organizationId;
		}

		_organizationId = organizationId;
	}

	public long getOriginalOrganizationId() {
		return _originalOrganizationId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public int getTaskTypeId() {
		return _taskTypeId;
	}

	@Override
	public void setTaskTypeId(int taskTypeId) {
		_taskTypeId = taskTypeId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	@Override
	public int getStatusId() {
		return _statusId;
	}

	@Override
	public void setStatusId(int statusId) {
		_statusId = statusId;
	}

	@Override
	public long getDoGroupId() {
		return _doGroupId;
	}

	@Override
	public void setDoGroupId(long doGroupId) {
		_doGroupId = doGroupId;
	}

	@Override
	public long getTaskAssessmentId() {
		return _taskAssessmentId;
	}

	@Override
	public void setTaskAssessmentId(long taskAssessmentId) {
		_taskAssessmentId = taskAssessmentId;
	}

	@Override
	public long getParentTTDPSPTaskCustMapId() {
		return _parentTTDPSPTaskCustMapId;
	}

	@Override
	public void setParentTTDPSPTaskCustMapId(long parentTTDPSPTaskCustMapId) {
		_parentTTDPSPTaskCustMapId = parentTTDPSPTaskCustMapId;
	}

	@Override
	public long getLinkedTTDPSubprocessCustMapId() {
		return _linkedTTDPSubprocessCustMapId;
	}

	@Override
	public void setLinkedTTDPSubprocessCustMapId(
		long linkedTTDPSubprocessCustMapId) {
		_linkedTTDPSubprocessCustMapId = linkedTTDPSubprocessCustMapId;
	}

	@Override
	public int getTaskOrderNumber() {
		return _taskOrderNumber;
	}

	@Override
	public void setTaskOrderNumber(int taskOrderNumber) {
		_taskOrderNumber = taskOrderNumber;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TTDPSPTaskCustomerMap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(TTDPSPTaskCustomerMap.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public TTDPSPTaskCustomerMap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TTDPSPTaskCustomerMap)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TTDPSPTaskCustomerMapImpl ttdpspTaskCustomerMapImpl = new TTDPSPTaskCustomerMapImpl();

		ttdpspTaskCustomerMapImpl.setTTDPSPTaskCustomerId(getTTDPSPTaskCustomerId());
		ttdpspTaskCustomerMapImpl.setTTDPSubProcessId(getTTDPSubProcessId());
		ttdpspTaskCustomerMapImpl.setTaskId(getTaskId());
		ttdpspTaskCustomerMapImpl.setOrderBy(getOrderBy());
		ttdpspTaskCustomerMapImpl.setOrganizationId(getOrganizationId());
		ttdpspTaskCustomerMapImpl.setName(getName());
		ttdpspTaskCustomerMapImpl.setTaskTypeId(getTaskTypeId());
		ttdpspTaskCustomerMapImpl.setCompanyId(getCompanyId());
		ttdpspTaskCustomerMapImpl.setCreatedBy(getCreatedBy());
		ttdpspTaskCustomerMapImpl.setCreatedOn(getCreatedOn());
		ttdpspTaskCustomerMapImpl.setModifiedBy(getModifiedBy());
		ttdpspTaskCustomerMapImpl.setModifiedOn(getModifiedOn());
		ttdpspTaskCustomerMapImpl.setStatusId(getStatusId());
		ttdpspTaskCustomerMapImpl.setDoGroupId(getDoGroupId());
		ttdpspTaskCustomerMapImpl.setTaskAssessmentId(getTaskAssessmentId());
		ttdpspTaskCustomerMapImpl.setParentTTDPSPTaskCustMapId(getParentTTDPSPTaskCustMapId());
		ttdpspTaskCustomerMapImpl.setLinkedTTDPSubprocessCustMapId(getLinkedTTDPSubprocessCustMapId());
		ttdpspTaskCustomerMapImpl.setTaskOrderNumber(getTaskOrderNumber());

		ttdpspTaskCustomerMapImpl.resetOriginalValues();

		return ttdpspTaskCustomerMapImpl;
	}

	@Override
	public int compareTo(TTDPSPTaskCustomerMap ttdpspTaskCustomerMap) {
		long primaryKey = ttdpspTaskCustomerMap.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TTDPSPTaskCustomerMap)) {
			return false;
		}

		TTDPSPTaskCustomerMap ttdpspTaskCustomerMap = (TTDPSPTaskCustomerMap)obj;

		long primaryKey = ttdpspTaskCustomerMap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TTDPSPTaskCustomerMapModelImpl ttdpspTaskCustomerMapModelImpl = this;

		ttdpspTaskCustomerMapModelImpl._originalTTDPSPTaskCustomerId = ttdpspTaskCustomerMapModelImpl._TTDPSPTaskCustomerId;

		ttdpspTaskCustomerMapModelImpl._setOriginalTTDPSPTaskCustomerId = false;

		ttdpspTaskCustomerMapModelImpl._originalTTDPSubProcessId = ttdpspTaskCustomerMapModelImpl._TTDPSubProcessId;

		ttdpspTaskCustomerMapModelImpl._setOriginalTTDPSubProcessId = false;

		ttdpspTaskCustomerMapModelImpl._originalTaskId = ttdpspTaskCustomerMapModelImpl._taskId;

		ttdpspTaskCustomerMapModelImpl._setOriginalTaskId = false;

		ttdpspTaskCustomerMapModelImpl._originalOrganizationId = ttdpspTaskCustomerMapModelImpl._organizationId;

		ttdpspTaskCustomerMapModelImpl._setOriginalOrganizationId = false;

		ttdpspTaskCustomerMapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TTDPSPTaskCustomerMap> toCacheModel() {
		TTDPSPTaskCustomerMapCacheModel ttdpspTaskCustomerMapCacheModel = new TTDPSPTaskCustomerMapCacheModel();

		ttdpspTaskCustomerMapCacheModel.TTDPSPTaskCustomerId = getTTDPSPTaskCustomerId();

		ttdpspTaskCustomerMapCacheModel.TTDPSubProcessId = getTTDPSubProcessId();

		ttdpspTaskCustomerMapCacheModel.taskId = getTaskId();

		ttdpspTaskCustomerMapCacheModel.orderBy = getOrderBy();

		ttdpspTaskCustomerMapCacheModel.organizationId = getOrganizationId();

		ttdpspTaskCustomerMapCacheModel.name = getName();

		String name = ttdpspTaskCustomerMapCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			ttdpspTaskCustomerMapCacheModel.name = null;
		}

		ttdpspTaskCustomerMapCacheModel.taskTypeId = getTaskTypeId();

		ttdpspTaskCustomerMapCacheModel.companyId = getCompanyId();

		ttdpspTaskCustomerMapCacheModel.createdBy = getCreatedBy();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			ttdpspTaskCustomerMapCacheModel.createdOn = createdOn.getTime();
		}
		else {
			ttdpspTaskCustomerMapCacheModel.createdOn = Long.MIN_VALUE;
		}

		ttdpspTaskCustomerMapCacheModel.modifiedBy = getModifiedBy();

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			ttdpspTaskCustomerMapCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			ttdpspTaskCustomerMapCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		ttdpspTaskCustomerMapCacheModel.statusId = getStatusId();

		ttdpspTaskCustomerMapCacheModel.doGroupId = getDoGroupId();

		ttdpspTaskCustomerMapCacheModel.taskAssessmentId = getTaskAssessmentId();

		ttdpspTaskCustomerMapCacheModel.parentTTDPSPTaskCustMapId = getParentTTDPSPTaskCustMapId();

		ttdpspTaskCustomerMapCacheModel.linkedTTDPSubprocessCustMapId = getLinkedTTDPSubprocessCustMapId();

		ttdpspTaskCustomerMapCacheModel.taskOrderNumber = getTaskOrderNumber();

		return ttdpspTaskCustomerMapCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{TTDPSPTaskCustomerId=");
		sb.append(getTTDPSPTaskCustomerId());
		sb.append(", TTDPSubProcessId=");
		sb.append(getTTDPSubProcessId());
		sb.append(", taskId=");
		sb.append(getTaskId());
		sb.append(", orderBy=");
		sb.append(getOrderBy());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", taskTypeId=");
		sb.append(getTaskTypeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdOn=");
		sb.append(getCreatedOn());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedOn=");
		sb.append(getModifiedOn());
		sb.append(", statusId=");
		sb.append(getStatusId());
		sb.append(", doGroupId=");
		sb.append(getDoGroupId());
		sb.append(", taskAssessmentId=");
		sb.append(getTaskAssessmentId());
		sb.append(", parentTTDPSPTaskCustMapId=");
		sb.append(getParentTTDPSPTaskCustMapId());
		sb.append(", linkedTTDPSubprocessCustMapId=");
		sb.append(getLinkedTTDPSubprocessCustMapId());
		sb.append(", taskOrderNumber=");
		sb.append(getTaskOrderNumber());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.lti.itops.ipac.custcatmgmt.model.TTDPSPTaskCustomerMap");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>TTDPSPTaskCustomerId</column-name><column-value><![CDATA[");
		sb.append(getTTDPSPTaskCustomerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TTDPSubProcessId</column-name><column-value><![CDATA[");
		sb.append(getTTDPSubProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderBy</column-name><column-value><![CDATA[");
		sb.append(getOrderBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskTypeId</column-name><column-value><![CDATA[");
		sb.append(getTaskTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdOn</column-name><column-value><![CDATA[");
		sb.append(getCreatedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedOn</column-name><column-value><![CDATA[");
		sb.append(getModifiedOn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doGroupId</column-name><column-value><![CDATA[");
		sb.append(getDoGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskAssessmentId</column-name><column-value><![CDATA[");
		sb.append(getTaskAssessmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTTDPSPTaskCustMapId</column-name><column-value><![CDATA[");
		sb.append(getParentTTDPSPTaskCustMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkedTTDPSubprocessCustMapId</column-name><column-value><![CDATA[");
		sb.append(getLinkedTTDPSubprocessCustMapId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taskOrderNumber</column-name><column-value><![CDATA[");
		sb.append(getTaskOrderNumber());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TTDPSPTaskCustomerMap.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TTDPSPTaskCustomerMap.class, ModelWrapper.class
		};
	private long _TTDPSPTaskCustomerId;
	private long _originalTTDPSPTaskCustomerId;
	private boolean _setOriginalTTDPSPTaskCustomerId;
	private long _TTDPSubProcessId;
	private long _originalTTDPSubProcessId;
	private boolean _setOriginalTTDPSubProcessId;
	private long _taskId;
	private long _originalTaskId;
	private boolean _setOriginalTaskId;
	private int _orderBy;
	private long _organizationId;
	private long _originalOrganizationId;
	private boolean _setOriginalOrganizationId;
	private String _name;
	private String _nameCurrentLanguageId;
	private int _taskTypeId;
	private long _companyId;
	private long _createdBy;
	private Date _createdOn;
	private long _modifiedBy;
	private Date _modifiedOn;
	private int _statusId;
	private long _doGroupId;
	private long _taskAssessmentId;
	private long _parentTTDPSPTaskCustMapId;
	private long _linkedTTDPSubprocessCustMapId;
	private int _taskOrderNumber;
	private long _columnBitmask;
	private TTDPSPTaskCustomerMap _escapedModel;
}